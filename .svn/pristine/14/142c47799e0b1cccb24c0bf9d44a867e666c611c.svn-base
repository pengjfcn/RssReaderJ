package com.cinread.rss.ui;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.cinread.rss.R;
import com.cinread.rss.adapter.SearchResultAdapter;
import com.cinread.rss.base.UIUtils;
import com.cinread.rss.bean.ResultBean;
import com.cinread.rss.bean.SubscribeInfo;
import com.cinread.rss.utils.FileUtils;
import com.cinread.rss.utils.LogUtils;
import com.cinread.rss.utils.SPUtils;
import com.google.gson.Gson;
import com.lidroid.xutils.DbUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.DbException;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @project：Rss
 * @package：com.cinread.rss.ui
 * @author：pengjf
 * @update：2016/4/14
 * @desc： TODO
 */
// Created by pengjf on 2016/4/14.
public class AddFeedActivity extends AppCompatActivity implements SearchView.OnQueryTextListener {

    private static final String TAG = "AddFeedActivity";

    private static final String   FEED_SEARCH_ENGINE = "http://cloud.feedly.com/v3/search/feeds?n=5&q=";
    private static final String   FEED_SEARCH_AGENT  = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2";
    private              String[] rssname            = {"知乎", "腾讯", "178动漫"};
    private              String[] url                = {"http://www.zhihu.com/rss", "http://news.qq.com/newsgn/rss_newsgn.xml", "http://acg.178.com/s/rss.xml"};
    private List<Map<String, Object>> mMapList;

    private ListView          mListView;
    private ListView          mLvSearch;
    private EditText          mEtUrl;
    private ArrayList<String> mUrls;
    private DbUtils db = UIUtils.getDbManager();
    private String     mUrlname;
    private SearchView mSearchView;
    private ActionBar  mActionBar;
    private String mEndName = "新闻";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_feed);
        init();
        initView();
        initData();
        initEvent();
    }

    private void init() {
        mActionBar = getSupportActionBar();
        View view = getLayoutInflater().inflate(R.layout.item_search_view, null);
        ActionBar.LayoutParams params = new ActionBar.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT, ActionBar.LayoutParams.WRAP_CONTENT);
        if (mActionBar != null) {
            mActionBar.setTitle(R.string.app_name);
            mActionBar.setDisplayHomeAsUpEnabled(true);
            mActionBar.setCustomView(view, params);
        }
        mSearchView = (SearchView) view.findViewById(R.id.search_view);
    }

    private void initView() {
        mListView = (ListView) findViewById(R.id.feed_lv_recommend);
        mLvSearch = (ListView) findViewById(R.id.feed_lv_search);
        mEtUrl = (EditText) findViewById(R.id.feed_et_url);
    }

    private void initData() {
        mUrls = new ArrayList<>();
        mMapList = new ArrayList<>();
        for (int i = 0; i < rssname.length; i++) {
            Map<String, Object> m = new HashMap<>();
            m.put("irs_tv_rssname", rssname[i]);
            m.put("irs_tv_rssurl", url[i]);
            mMapList.add(m);
        }
        mListView.setAdapter(new SimpleAdapter(UIUtils.getContext(), mMapList, R.layout.item_rss_simple, new String[]{"irs_tv_rssname", "irs_tv_rssurl"}, new int[]{R.id.irs_tv_rssname, R.id.irs_tv_rssurl}));
    }

    private void initEvent() {
        /*mBtnAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mUrlname = mEtUrl.getText().toString().trim();
                if (TextUtils.isEmpty(mUrlname)) {
                    Toast.makeText(UIUtils.getContext(), "输入不能为空", Toast.LENGTH_SHORT).show();
                    return;
                }
                result();
            }
        });
        mBtnSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mEndName = mEtUrl.getText().toString().trim();
                searchFile();
            }
        });*/
        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                TextView tvUrl = (TextView) view.findViewById(R.id.irs_tv_rssurl);
                mUrlname = (String) tvUrl.getText();
                result();
                Toast.makeText(UIUtils.getContext(), "成功添加", Toast.LENGTH_SHORT).show();
            }
        });
        mLvSearch.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //添加
                TextView tvUrl = (TextView) view.findViewById(R.id.isr_tv_url);
                mUrlname = (String) tvUrl.getText();
                result();
                Toast.makeText(UIUtils.getContext(), "成功添加", Toast.LENGTH_SHORT).show();
            }
        });
        mSearchView.setOnQueryTextListener(this);
    }

    private void result() {
        mUrls.add(mUrlname);
        for (int i = 0; i < mUrls.size(); i++) {
            SubscribeInfo info = new SubscribeInfo();
            String[] str = mUrls.get(i).split("/");
            StringBuffer sb = new StringBuffer();
            String name = str[2];
            String[] names = name.split("\\.");
            if (names.length == 4) {
                sb.append("http://").append(names[1] + "." + names[2] + "." + names[3]).append("/favicon.ico");
                info.setTitle(FileUtils.changeName(names[1]));
            } else if (names.length == 3) {
                sb.append("http://").append(names[1] + "." + names[2]).append("/favicon.ico");
                info.setTitle(FileUtils.changeName(names[1]));
            } else if (names.length == 2) {
                sb.append("http://").append(names[0] + "." + names[1]).append("/favicon.ico");
                info.setTitle(FileUtils.changeName(names[0]));
            }
            SPUtils.setString(UIUtils.getContext(), names[1], sb.toString());
            info.setCover(sb.toString());
            info.setUrl(mUrls.get(i));
            try {
                db.replace(info);
            } catch (DbException e) {
                e.printStackTrace();
            }
        }
        finish();
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                if (mActionBar.getCustomView().isShown()) {
                    mActionBar.setDisplayShowCustomEnabled(false);
                } else {
                    finish();
                }
                break;
            case R.id.view_search:
                mActionBar.setDisplayShowCustomEnabled(true);
                searchFile();
                break;
            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    //搜索所有文件-根据文件名的首字母查询
    private void searchFile() {
        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                //获取搜索结果数据
                HttpUtils http = new HttpUtils(5000, FEED_SEARCH_AGENT);
                http.send(HttpRequest.HttpMethod.GET, FEED_SEARCH_ENGINE + mEndName, new RequestCallBack<String>() {
                    @Override
                    public void onSuccess(ResponseInfo<String> responseInfo) {
                        String result = responseInfo.result;
                        LogUtils.d(TAG, result);
                        parseJson(result);
                    }

                    @Override
                    public void onFailure(HttpException error, String msg) {

                    }
                });
                return null;
            }
        }.execute();
    }

    private void parseJson(String json) {
        Gson gson = new Gson();
        ResultBean rb = gson.fromJson(json, ResultBean.class);
        List<ResultBean.ResultsBean> results = rb.getResults();
        mLvSearch.setAdapter(new SearchResultAdapter(results));
    }

    @Override
    public boolean onQueryTextSubmit(String query) {
        return false;
    }

    @Override
    public boolean onQueryTextChange(String newText) {
        mEndName = newText;
        if (TextUtils.isEmpty(newText)) {
            mLvSearch.clearTextFilter();
        } else {
            mLvSearch.setFilterText(newText);
        }
        return false;
    }

    @Override
    public void onBackPressed() {
        if (mActionBar.getCustomView().isShown()) {
            mActionBar.setDisplayShowCustomEnabled(false);
        } else {
            finish();
        }
    }
}
